name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev", "Dev" ]
  pull_request:
    branches: [ "main", "dev", "Dev" ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  ACR_NAME: 'developmentBranch'
  ACR_LOGIN_SERVER: 'developmentbranch.azurecr.io'
  AZURE_RESOURCE_GROUP: 'NetworkWatcherRG'
  AKS_CLUSTER_NAME: 'devclasterroman'

jobs:
  # Frontend CI Jobs
  frontend-test:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false

      - name: 🏗️ Build frontend
        run: npm run build

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  frontend-lint:
    name: 🔍 Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 🔍 Run ESLint
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json || true

      - name: 📊 Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: frontend/eslint-report.json

  # Backend CI Jobs
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black bandit safety

      - name: 🔍 Run linting (flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git

      - name: 🎨 Check code formatting (black)
        run: black --check --diff .

      - name: 🔒 Security scan (bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Check dependencies (safety)
        run: safety check --json --output safety-report.json || true

      - name: 🧪 Run tests with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=term

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # Docker Build Jobs
  docker-build:
    name: 🐳 Docker Build & Push to Azure Container Registry
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: � Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔍 Determine image tags based on branch
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/backend-prod:latest" >> $GITHUB_OUTPUT
            echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/frontend-prod:latest" >> $GITHUB_OUTPUT
            echo "backend_image_sha=${{ env.ACR_LOGIN_SERVER }}/backend-prod:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "frontend_image_sha=${{ env.ACR_LOGIN_SERVER }}/frontend-prod:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" == "refs/heads/Dev" ]]; then
            echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/backend-dev:latest" >> $GITHUB_OUTPUT
            echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/frontend-dev:latest" >> $GITHUB_OUTPUT
            echo "backend_image_sha=${{ env.ACR_LOGIN_SERVER }}/backend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "frontend_image_sha=${{ env.ACR_LOGIN_SERVER }}/frontend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/backend-dev:latest" >> $GITHUB_OUTPUT
            echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/frontend-dev:latest" >> $GITHUB_OUTPUT
            echo "backend_image_sha=${{ env.ACR_LOGIN_SERVER }}/backend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "frontend_image_sha=${{ env.ACR_LOGIN_SERVER }}/frontend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: 🏗️ Build and push backend image
        run: |
          docker build -t ${{ steps.tags.outputs.backend_image }} \
                       -t ${{ steps.tags.outputs.backend_image_sha }} \
                       ./backend
          docker push ${{ steps.tags.outputs.backend_image }}
          docker push ${{ steps.tags.outputs.backend_image_sha }}

      - name: 🏗️ Build and push frontend image
        run: |
          docker build -t ${{ steps.tags.outputs.frontend_image }} \
                       -t ${{ steps.tags.outputs.frontend_image_sha }} \
                       ./frontend
          docker push ${{ steps.tags.outputs.frontend_image }}
          docker push ${{ steps.tags.outputs.frontend_image_sha }}

      - name: 📝 Output deployment info
        run: |
          echo "🚀 Images pushed to ${{ steps.tags.outputs.environment }} environment:"
          echo "🏷️ Backend Image: ${{ steps.tags.outputs.backend_image }}"
          echo "🏷️ Frontend Image: ${{ steps.tags.outputs.frontend_image }}"
          echo "🌍 Environment: ${{ steps.tags.outputs.environment }}"

  # Deployment Job
  deploy:
    name: 🚀 Deploy to Azure AKS
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Dev')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔧 Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔧 Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

      - name: 🔍 Determine deployment environment and images
        id: deploy_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/backend-prod:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/frontend-prod:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "manifest_path=k8s/prod/" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" == "refs/heads/Dev" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/backend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/frontend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "manifest_path=k8s/dev/" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests
          sed -i "s|developmentbranch.azurecr.io/backend.*:.*|${{ steps.deploy_env.outputs.backend_image }}|g" ${{ steps.deploy_env.outputs.manifest_path }}backend-deployment.yaml
          sed -i "s|developmentbranch.azurecr.io/frontend.*:.*|${{ steps.deploy_env.outputs.frontend_image }}|g" ${{ steps.deploy_env.outputs.manifest_path }}frontend-deployment.yaml
          
          # Apply k8s manifests
          kubectl apply -f ${{ steps.deploy_env.outputs.manifest_path }} --validate=true || {
            echo "⚠️ Validation failed, applying without validation..."
            kubectl apply -f ${{ steps.deploy_env.outputs.manifest_path }} --validate=false
          }
          
          # Apply common services if not using environment-specific manifests
          if [[ "${{ steps.deploy_env.outputs.manifest_path }}" == "k8s/dev/" ]] || [[ "${{ steps.deploy_env.outputs.manifest_path }}" == "k8s/prod/" ]]; then
            kubectl apply -f k8s/backend-service.yaml --validate=false
            kubectl apply -f k8s/frontend-service.yaml --validate=false
            kubectl apply -f k8s/ingress.yaml --validate=false
          fi
          
          # Wait for rollout
          kubectl rollout status deployment/backend --timeout=300s
          kubectl rollout status deployment/frontend --timeout=300s

      - name: 🔗 Get Service URLs
        run: |
          echo "📡 Getting service information..."
          
          # Get external IPs from Azure Load Balancer
          FRONTEND_IP=$(kubectl get service frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get service backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Frontend External IP: $FRONTEND_IP"
          echo "Backend External IP: $BACKEND_IP"
          
          # Set environment variables for next step
          echo "FRONTEND_URL=http://$FRONTEND_IP" >> $GITHUB_ENV
          echo "BACKEND_URL=http://$BACKEND_IP" >> $GITHUB_ENV

      - name: 🎉 Deployment Success Notification
        if: success()
        run: |
          # Get external IPs again for final notification
          FRONTEND_IP=$(kubectl get service frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get service backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "✅ Deployment successful!"
          echo "🔗 Frontend: http://$FRONTEND_IP"
          echo "🔗 Backend: http://$BACKEND_IP"
          echo " Environment: ${{ steps.deploy_env.outputs.environment }}"
          echo ""
          echo "📋 To check service status manually:"
          echo "kubectl get services"
          echo "kubectl get pods"

  # Notification Job
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-lint, backend-test, docker-build, deploy]
    if: always()

    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Lint | ${{ needs.frontend-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
