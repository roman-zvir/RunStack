name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev", "Dev" ]
  pull_request:
    branches: [ "main", "dev", "Dev" ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  GCP_PROJECT: 'intern-466414'
  ARTIFACT_REGISTRY: 'us-central1-docke      - na      - name: ÔøΩ Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests with branch-specific repository
          # Handle current prod-repo/dev-repo images and legacy my-repo images
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/prod-repo/backend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/dev-repo/backend:.*|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/backend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/prod-repo/frontend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/dev-repo/frontend:.*|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/frontend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yamlüöÄ Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests with branch-specific repository
          # Handle both current prod-repo images and legacy my-repo images
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/prod-repo/backend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/dev-repo/backend:.*|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/backend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/prod-repo/frontend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/dev-repo/frontend:.*|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/frontend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml.dev'
  DEV_REPOSITORY_NAME: 'dev-repo'
  PROD_REPOSITORY_NAME: 'prod-repo'

jobs:
  # Frontend CI Jobs
  frontend-test:
    name: üß™ Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: üì¶ Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: üß™ Run tests
        run: npm test -- --coverage --watchAll=false

      - name: üèóÔ∏è Build frontend
        run: npm run build

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  frontend-lint:
    name: üîç Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: üì¶ Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: üîç Run ESLint
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json || true

      - name: üìä Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: frontend/eslint-report.json

  # Backend CI Jobs
  backend-test:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black bandit safety

      - name: üîç Run linting (flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git

      - name: üé® Check code formatting (black)
        run: black --check --diff .

      - name: üîí Security scan (bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: üõ°Ô∏è Check dependencies (safety)
        run: safety check --json --output safety-report.json || true

      - name: üß™ Run tests with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=term

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: üìä Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # Docker Build Jobs
  docker-build:
    name: üê≥ Docker Build & Push to Artifact Registry
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ÔøΩ Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üê≥ Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîç Determine repository based on branch
        id: repo
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "repository=${{ env.PROD_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag_suffix=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" == "refs/heads/Dev" ]]; then
            echo "repository=${{ env.DEV_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "tag_suffix=dev" >> $GITHUB_OUTPUT
          else
            echo "repository=${{ env.DEV_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "tag_suffix=dev" >> $GITHUB_OUTPUT
          fi

      - name: üèóÔ∏è Create repository if it doesn't exist
        run: |
          # Check if repository exists, create if it doesn't
          if ! gcloud artifacts repositories describe ${{ steps.repo.outputs.repository }} --location=us-central1 --quiet &> /dev/null; then
            echo "üî® Creating repository ${{ steps.repo.outputs.repository }}..."
            gcloud artifacts repositories create ${{ steps.repo.outputs.repository }} \
              --repository-format=docker \
              --location=us-central1 \
              --description="${{ steps.repo.outputs.environment }} environment container registry"
          else
            echo "‚úÖ Repository ${{ steps.repo.outputs.repository }} already exists"
          fi

      - name: üèóÔ∏è Build and push backend image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:latest \
                       -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:${{ github.sha }} \
                       -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:${{ steps.repo.outputs.tag_suffix }}-latest \
                       ./backend
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:latest
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/backend:${{ steps.repo.outputs.tag_suffix }}-latest

      - name: üèóÔ∏è Build and push frontend image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:latest \
                       -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:${{ github.sha }} \
                       -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:${{ steps.repo.outputs.tag_suffix }}-latest \
                       ./frontend
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:latest
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.repo.outputs.repository }}/frontend:${{ steps.repo.outputs.tag_suffix }}-latest

      - name: üìù Output deployment info
        run: |
          echo "üöÄ Images pushed to ${{ steps.repo.outputs.environment }} repository:"
          echo "üì¶ Repository: ${{ steps.repo.outputs.repository }}"
          echo "üè∑Ô∏è Tags: latest, ${{ github.sha }}, ${{ steps.repo.outputs.tag_suffix }}-latest"
          echo "üåç Environment: ${{ steps.repo.outputs.environment }}"

  # Deployment Job
  deploy:
    name: üöÄ Deploy to GCP
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Dev')

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üîß Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: üîß Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT }}

      - name: ÔøΩ Determine repository and environment for deployment
        id: deploy_repo
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "repository=${{ env.PROD_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.ref }}" == "refs/heads/Dev" ]]; then
            echo "repository=${{ env.DEV_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "repository=${{ env.DEV_REPOSITORY_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: ÔøΩüöÄ Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests with branch-specific repository
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/backend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|us-central1-docker.pkg.dev/intern-466414/my-repo/frontend:latest|${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT }}/${{ steps.deploy_repo.outputs.repository }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          
          # Apply k8s manifests with validation
          kubectl apply -f k8s/ --validate=true || {
            echo "‚ö†Ô∏è Validation failed, applying without validation..."
            kubectl apply -f k8s/ --validate=false
          }
          
          # Wait for rollout
          kubectl rollout status deployment/backend
          kubectl rollout status deployment/frontend
          
          # Wait for LoadBalancer services to get external IPs
          echo "‚è≥ Waiting for LoadBalancer services to get external IPs..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress}' service/frontend --timeout=300s || echo "Frontend LoadBalancer timeout"
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress}' service/backend --timeout=300s || echo "Backend LoadBalancer timeout"

      - name: üîó Get Service URLs
        run: |
          echo "üì° Getting service information..."
          
          # Get external IPs
          FRONTEND_IP=$(kubectl get service frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get service backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Frontend External IP: $FRONTEND_IP"
          echo "Backend External IP: $BACKEND_IP"
          
          # Set environment variables for next step
          echo "FRONTEND_URL=http://$FRONTEND_IP" >> $GITHUB_ENV
          echo "BACKEND_URL=http://$BACKEND_IP" >> $GITHUB_ENV

      - name: üéâ Deployment Success Notification
        if: success()
        run: |
          # Get external IPs again for final notification
          FRONTEND_IP=$(kubectl get service frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get service backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "‚úÖ Deployment successful!"
          echo "üîó Frontend: http://$FRONTEND_IP"
          echo "üîó Backend: http://$BACKEND_IP"
          echo "üè∑Ô∏è Repository: ${{ steps.deploy_repo.outputs.repository }}"
          echo "üåç Environment: ${{ steps.deploy_repo.outputs.environment }}"
          echo ""
          echo "üìã To check service status manually:"
          echo "kubectl get services"
          echo "kubectl get pods"

  # Notification Job
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-lint, backend-test, docker-build, deploy]
    if: always()

    steps:
      - name: üìä Pipeline Summary
        run: |
          echo "## üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Lint | ${{ needs.frontend-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
