name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev", "Dev" ]
  pull_request:
    branches: [ "main", "dev", "Dev" ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend CI Jobs
  frontend-test:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false

      - name: 🏗️ Build frontend
        run: npm run build

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  frontend-lint:
    name: 🔍 Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 🔍 Run ESLint
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json || true

      - name: 📊 Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: frontend/eslint-report.json

  # Backend CI Jobs
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black bandit safety

      - name: 🔍 Run linting (flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git

      - name: 🎨 Check code formatting (black)
        run: black --check --diff .

      - name: 🔒 Security scan (bandit)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Check dependencies (safety)
        run: safety check --json --output safety-report.json || true

      - name: 🧪 Run tests with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=term

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # Docker Build Jobs
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        if: false  # Disabled until Docker Hub secrets are configured
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false  # Disabled until Docker Hub secrets are configured
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/myapp-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false  # Disabled until Docker Hub secrets are configured
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔒 Run Trivy vulnerability scanner (Backend)
        if: false  # Disabled until Docker Hub integration is configured
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: 🔒 Run Trivy vulnerability scanner (Frontend)
        if: false  # Disabled until Docker Hub integration is configured
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/myapp-frontend:latest
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        if: false  # Disabled until Docker Hub integration is configured
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '.'

  # Deployment Job
  deploy:
    name: 🚀 Deploy to GCP
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: false  # Disabled until GCP secrets are configured

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🔧 Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT }}

      - name: 🚀 Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests
          sed -i "s|romanzvir/myapp-backend:.*|${{ secrets.DOCKER_USERNAME }}/myapp-backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|romanzvir/myapp-frontend:.*|${{ secrets.DOCKER_USERNAME }}/myapp-frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          
          # Apply k8s manifests
          kubectl apply -f k8s/
          
          # Wait for rollout
          kubectl rollout status deployment/backend-deployment
          kubectl rollout status deployment/frontend-deployment

      - name: 🎉 Deployment Success Notification
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🔗 Frontend: http://34.66.141.78:3000"
          echo "🔗 Backend: http://104.155.134.17:5000"

  # Notification Job
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [frontend-test, frontend-lint, backend-test, docker-build, deploy]
    if: always()

    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Lint | ${{ needs.frontend-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
